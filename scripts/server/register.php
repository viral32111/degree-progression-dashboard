<?php

/*
 This script is intended to be manually called to create new users in the database.
 It must be done this way to properly hash user passwords and generate two-factor secrets.
*/

// This script cannot be executed by default for security reasons, if you want to use it then comment out the three lines below.
http_response_code( 403 );
header( 'Content-Type: text/plain' );
exit( 'Usage of this script has been disabled.' );

// Include other scripts that are required for operation
require_once( '../../include/database.php' );
require_once( '../../include/base32.php' );
require_once( '../../include/twofactor.php' );
require_once( '../../include/validate.php' );

// Set the credentials and options for the new user that will be created
$userName = ''; // See validation include script for minimum requirements
$userPassword = ''; // See validation include script for minimum requirements
$userCourse = 1; // The identifier for the course the user is on (must exist in the database!)

$passwordHashStrength = 12; // The number of bcrypt iterations to use when hashing the password
$generateTwoFactor = true; // Set to true to generate a two-factor authentication secret

// Do not continue if the username or password set above to not meet the minimum requirements
// No need to validate the two-factor code later on because it is generated by the server and not provided by the user
if ( !validateUsername( $userName ) || !validatePassword( $userPassword ) ) {
	http_response_code( 400 );
	header( 'Content-Type: text/plain' );
	exit( 'The username or password set does not meet the minimum requirements.' );
}

/*
 NOTE: This MySQL database server's encryption mode has been changed to AES-256-CBC because it provides better security than the default AES-128-ECB due to the use of IVs and greater key size.
 So, if you are running this on your own MySQL database server then you need to change the global block_encryption_mode variable in the MySQL .cnf file.
 https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_block_encryption_mode
*/

// Query the database to insert a new user record using encryption for better backend security
// By encrypting the two-factor authentication secret with the users password, this allows for zero-trust security as there is no way the database administrator or anyone else could acquire this secret as it can only be decrypted when the user enters their password.
// NOTE: Have to use SHA512 here because it generates a >32-byte output which is required to create a 256-bit AES symmetric key
// https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_aes-encrypt
$registerQuery = Database::$databaseConnection->prepare( 'INSERT INTO users ( userCourse, userName, userPassword, userTwoFactor, userInitVector ) VALUES ( :userCourse, :userName, :hashedUserPassword, AES_ENCRYPT( :userTwoFactor, UNHEX( SHA2( :userPassword, 512 ) ), :userInitVector ), :userInitVector );' );

// Bind the user course identifier to the corresponding field in the query as an integer
$registerQuery->bindValue( ':userCourse', $userCourse, PDO::PARAM_INT );

// Bind the user name to the corresponding field in the query as a string
$registerQuery->bindValue( ':userName', $userName, PDO::PARAM_STR );

// Bind the bcrypt hashed user password using the configured strength to the corresponding field in the query as a string
// NOTE: Using PBKDF2 would be better because it gives more control over options (hash type, salt, key length, iteration count) but bcrypt is still very secure so there is no rush to use it.
$registerQuery->bindValue( ':hashedUserPassword', password_hash( $userPassword, PASSWORD_BCRYPT, [
	'cost' => $passwordHashStrength
] ), PDO::PARAM_STR );

// Bind the original user password to the corresponding field in the query as a string for encrypting the two-factor secret (if applicable)
$registerQuery->bindValue( ':userPassword', $userPassword, PDO::PARAM_STR );

// Securely generate an initialization vector for any future encryption, then bind it to the corresponding field in the query raw data (stackoverflow.com/a/31147653)
$initalizationVector = random_bytes( 16 );
$registerQuery->bindValue( ':userInitVector', $initalizationVector, PDO::PARAM_LOB );

// If the user is set to have two-factor authentication...
if ( $generateTwoFactor ) {

	// Securely generate a 16 byte two-factor authentication secret
	$twoFactorSecret = random_bytes( 16 );

	// Bind the two-factor secret to the two-factor field in the query as raw data
	$registerQuery->bindValue( ':userTwoFactor', $twoFactorSecret, PDO::PARAM_LOB );

// If the user is not set to have two-factor authentication, then set the two-factor field in the query to null
} else {
	$registerQuery->bindValue( ':userTwoFactor', null, PDO::PARAM_NULL );
}

// Attempt to execute the user registration query (output an error if it fails)
try {
	$registerQuery->execute();
} catch ( PDOException $exception ) {
	http_response_code( 500 );
	header( 'Content-Type: text/plain' );
	exit( $exception->getMessage() );
}

?>
<!DOCTYPE html>
<html lang="en-GB">
	<head>
		<title>Registration Script</title>

		<!-- Set the character encoding for this page -->
		<meta charset="utf-8">

		<!-- Prevent search engines from crawling and indexing this page since it is going to be published on the Internet -->
		<meta name="robots" content="noindex,nofollow,noarchive,noimageindex,nosnippet,nositelinkssearchbox">

		<!-- Prevent the browser from rendering the page in an ugly way -->
		<style>
			body {
				margin: 0px;
				padding: 0px;
				font-family: monospace;
			}

			p {
				margin: 5px;
			}
		</style>
	</head>
	<body>
		<!-- Display the new user credentials -->
		<p>Username: <strong><?= $userName ?></strong></p>
		<p>Password: <strong><?= $userPassword ?></strong></p>
		<br>

		<!-- If the two-factor authentication secret has been generated... -->
		<?php if ( isset( $twoFactorSecret ) ) { 

			// Generate and store the one-time-password URI
			$otpUri = generateOTPURI( $twoFactorSecret, $userName ); ?>

			<!-- Display the base32-encoded two-factor secret -->
			<p>Two-factor Secret: <strong><?= encodeToBase32( $twoFactorSecret ); ?></strong></p>

			<!-- Display the one-time-password URI for this two-factor secret and link it to the Google Charts API to generate a QR code (developers.google.com/chart/infographics/docs/qr_codes) -->
			<p>Two-factor URI: <strong><a href="https://chart.googleapis.com/chart?cht=qr&chs=512x512&choe=UTF-8&chld=H|1&chl=<?= rawurlencode( $otpUri ); ?>"><?= $otpUri; ?></a></strong></p>

			<!-- Display the current two-factor code for this two-factor secret -->
			<p>Two-factor Code: <strong><?= generateTwoFactorCode( $twoFactorSecret ); ?></strong></p>

		<?php } ?>
	</body>
</html>
